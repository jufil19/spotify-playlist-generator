library(gclus)
data(body)
body$Gender <- factor(body$Gender)
library(randomForest)
set.seed(4521)
bodyRF <- randomForest(Gender~., data=body)
bodyRF
library(MLmetrics)
Sensitivity(body$Gender, predict(bodyRF))
Recall(body$Gender, predict(bodyRF)) #same thing!
Precision(body$Gender, predict(bodyRF))
Specificity(body$Gender, predict(bodyRF))
predict(bodyRF, type="prob")
as.numeric(body$Gender)
library(class)
knnruns <- list()
for(i in 1:300){
knnruns[[i]] <- knn.cv(body[,-25], body$Gender, k=i, prob=TRUE)
}
misclass <- unlist(lapply(knnruns, function(v) 507-sum(diag(table(body$Gender, v)))))
plot(misclass)
which.min(misclass)
knnbest <- knnruns[[3]]
table(body$Gender, knnbest)
Sensitivity(body$Gender, knnbest)
Recall(body$Gender, knnbest) #same thing!
Precision(body$Gender, knnbest)
Specificity(body$Gender, knnbest)
F1_Score(body$Gender, knnbest)
probs <- attr(knnbest, "prob")
probs
?attr
knnbest
probs <- attr(knnbest, "probability")
probs <- attr(knnbest, "prob")
knnbest
knnbest
knnbest <- knnruns[[3]]
knnbest
library(class)
knnruns <- list()
for(i in 1:300){
knnruns[[i]] <- knn.cv(body[,-25], body$Gender, k=i, prob=TRUE)
}
library(MASS)
bodylda <- lda(Gender~., data=body, CV=TRUE)
library(gclus)
data(body)
body$Gender <- factor(body$Gender)
library(class)
knnruns <- list()
for(i in 1:300){
knnruns[[i]] <- knn.cv(body[,-25], body$Gender, k=i, prob=TRUE)
}
misclass <- unlist(lapply(knnruns, function(v) 507-sum(diag(table(body$Gender, v)))))
plot(misclass)
which.min(misclass)
knnbest <- knnruns[[3]]
knnbest
probs <- attr(knnbest, "prob")
(sum(-log(probs[body$Gender==knnbest])) + sum(-log(1-probs[body$Gender!=knnbest])))/507
probs <- attr(knnbest, "prob")
(sum(-log(probs[body$Gender==knnbest])) + sum(-log(1-probs[body$Gender!=knnbest])))/507
probs
body$Gender
missedprobs <- 1-probs[body$Gender!=knnbest]
missedprobs[missedprobs==0] <- 1e-15
probs[probs==0] <- 1e-15
(sum(-log(probs[body$Gender==knnbest])) + sum(-log(missedprobs)))/507
# # install.packages("arules")
# # install.packages("arulesViz")
library(tidyverse)
library(stringr)
install.packages("arules")
install.packages("effects")
install.packages('carData')
library(arules)
library(effects)
install.packages("carData")
install.packages("carData")
library(effects)
install.packages('nloptr)
install.packages('nloptr')
install.packages('nloptr')
install.packages('nloptr')
library(tidyverse)
library(stringr)
#
df <- read.csv('okcupidprofiles.csv', stringsAsFactors = FALSE)
glimpse(df) #Everything is a string
#
df <- read.csv('okcupidprofiles.csv', stringsAsFactors = FALSE)
library(tidyverse)
library(stringr)
#
df <- read.csv('okcupidprofiles.csv', stringsAsFactors = FALSE)
glimpse(df) #Everything is a string
df[,c('age', 'height', 'income')] <- lapply(df[,c('age', 'height', 'income')], as.integer)
df <- na.omit(df)
df$age <- cut(df$age, breaks = c(18, 28, 38, 48, 58, 68, 78, 88, 98, 108, 118), include.lowest = TRUE)
# body_type (remove rows that are empty string)
df$body_type <- as.factor(df$body_type)
(1 - sum(df$body_type != "")/nrow(df))*100 # There is only 8.83% missing data
levels(df$body_type)
table(df$body_type)
df <- df[df$body_type != "",]
# diet (remove the column because more than 15% of missing data)
df$diet <- as.factor(df$diet)
(1 - sum(df$diet != "")/nrow(df))*100 # There is 37.73% missing data
df <- subset(df, select = -diet)
# drinks (remove rows that are empty string)
df$drinks <- as.factor(df$drinks)
(1 - sum(df$drinks != "")/nrow(df))*100 # There is only 4.267% missing data
levels(df$drinks)
table(df$drinks)
df <- df[df$drinks != "",]
# drugs (remove the column because more than 15% of missing data)
df$drugs <- as.factor(df$drugs)
(1 - sum(df$drugs != "")/nrow(df))*100 # There is 21.72% missing data
levels(df$drugs)
table(df$drugs)
df <- subset(df, select = -drugs)
# education (removing empty strings and combining levels)
df$education <- as.factor(df$education)
(1 - sum(df$education != "")/nrow(df))*100 # There is only 9.1839 missing data
levels(df$education)
table(df$education)
df <- df[df$education != "",]
levels(df$education) <- c("", "college/university", rep("dropped out",8), "college/university", "high school", "law school", "masters program", "med school", "ph.d program", "space camp", "two-year college","high school", "law school","masters program", "med school", "ph.d program", "space camp", "two-year college", "college/university", 'high school', 'law school', 'masters program', 'med school', 'ph.d program', 'space camp', 'two-year college')
# ethnicity (If level had less than 300 observation, put it in other bin)
df$ethnicity <- as.factor(df$ethnicity)
(1 - sum(df$ethnicity != "")/nrow(df))*100 # There is only 7.229 missing data
length(levels(df$ethnicity))
df <- df[df$ethnicity != "",]
levels(df$ethnicity)[table(df$ethnicity) < 300] <- 'other'
# height
df <- df[df$height >= 36, ]
df$height <- cut(df$height, breaks = c(35,40, 45,50, 55,60, 65,70, 75,80, 85,90, 95), include.lowest = TRUE)
table(df$height)
# income (remove column because more than 15% missing data)
df$income <- as.factor(df$income)
(1 - (sum(df$income == '-1')/nrow(df)))*100 # There is 21.67% missing data
df <- subset(df, select = -income)
# job
df$job <- as.factor(df$job)
(1 - sum(df$job != "")/nrow(df))*100 # There is only 7.79 missing data
levels(df$job)
table(df$job)
df <- df[df$job != "",]
# last online
# removing because unspecific
df <- subset(df, select = -last_online)
# location
df$location <- as.factor(df$location)
(1 - sum(df$ethnicity != "")/nrow(df))*100
levels(df$location)
levels(df$location)[table(df$location) < 300] <- 'other'
# offspring
df$offspring <- as.factor(df$offspring)
(1 - sum(df$offspring != "")/nrow(df))*100 # There is 54.85* missing data, so remove column
df <- subset(df, select = -offspring)
# orientation (no cleaning needed)
df$orientation <- as.factor(df$orientation)
(1 - sum(df$orientation != "")/nrow(df))*100 # no empty strings
levels(df$orientation)
table(df$orientation)
# Pets
df$pets <- as.factor(df$pets)
(1 - sum(df$pets != "")/nrow(df))*100 # There is 26.96 % missing data, so remove column
df <- subset(df, select = -pets)
# Religion
df$religion <- as.factor(df$religion)
(1 - sum(df$religion != "")/nrow(df))*100 # There is a 26.18 % missing data, so remove column
df <- subset(df, select = -religion)
# Sex (no cleaning needed)
df$sex <- as.factor(df$sex)
(1 - sum(df$sex != "")/nrow(df))*100 # There is 0 % missing data, so remove column
levels(df$sex)
table(df$sex)
# Sign
df$sign <- as.factor(df$sign)
(1 - sum(df$sign != "")/nrow(df))*100 # There is 13.45 % missing data
levels(df$sign)
table(df$sign)
df <- df[df$sign != "",]
# smokes
df$smokes <- as.factor(df$smokes)
(1 - sum(df$smokes != "")/nrow(df))*100 # There is 4.34 % missing data
levels(df$smokes)
table(df$smokes)
df <- df[df$smokes != "",]
# speaks (too many different factors)
df$speaks <- as.factor(df$speaks)
(1 - sum(df$speaks != "")/nrow(df))*100 # There is 0.05 % missing data
levels(df$speaks)
levels(df$speaks)
table(df$sm)
df <- df[df$speaks != "",]
# status (no cleaning)
df$status <- as.factor(df$status)
(1 - sum(df$status != "")/nrow(df))*100 # There is 0 % missing data
levels(df$status)
table(df$smokes)
apri <- apriori(df)
#install.packages("arules")
#install.packages("effects")
library(arules)
library(effects)
library(nloptr)
apri <- apriori(df)
apri <- apriori(df)
summary(apri)
apri <- apriori(df, parameter=list(supp=0.04, conf=.8))
summary(apri)
inspect(sort(asurv, by="support")[1:10])
library(gapminder)
library(lubridate)
library(testthat)
library(tidyverse)
dirty <- read_tsv('https://raw.githubusercontent.com/STAT545-UBC/STAT545-UBC-original-website/master/gapminderDataFiveYear_dirty.txt')
dirty <- dirty %>% separate(region, into = c("continent", "country"), sep = "_")
dirty[dirty[5] == "", 5] <- "Americas"
unique(dirty$continent)
unique(gapminder::gapminder$continent)
dirty_country <- unique(dirty$country)
clean_country <- as.character(unique(gapminder::gapminder$country))
dirty$country <- dirty$country %>%
str_replace("china", "China") %>%
str_replace(c("Democratic Republic of the Congo", "Congo, Democratic Republic"),"Congo, Dem. Rep.")
dirty_country
dirty$country <- str_replace(dirty$country, "china", "China")
dirty$country
dirty <- read_tsv('https://raw.githubusercontent.com/STAT545-UBC/STAT545-UBC-original-website/master/gapminderDataFiveYear_dirty.txt')
dirty <- dirty %>% separate(region, into = c("continent", "country"), sep = "_")
dirty
dirty[dirty[5] == "", 5] <- "Americas"
dirty_country <- unique(dirty$country)
clean_country <- as.character(unique(gapminder::gapminder$country))
dirty$country <- str_replace(dirty$country, "china", "China")
View(dirty)
unique(dirty$country)
dirty <- read_tsv('https://raw.githubusercontent.com/STAT545-UBC/STAT545-UBC-original-website/master/gapminderDataFiveYear_dirty.txt')
dirty <- dirty %>% separate(region, into = c("continent", "country"), sep = "_")
dirty[dirty[5] == "", 5] <- "Americas"
dirty$country <- str_replace(dirty$country, "china", "China") %>%
str_replace(c("Democratic Republic of the Congo", "Congo, Democratic Republic"),"Congo, Dem. Rep.")
unique(dirty$country)
dirty <- read_tsv('https://raw.githubusercontent.com/STAT545-UBC/STAT545-UBC-original-website/master/gapminderDataFiveYear_dirty.txt')
dirty <- dirty %>% separate(region, into = c("continent", "country"), sep = "_")
dirty[dirty[5] == "", 5] <- "Americas"
dirty_country <- unique(dirty$country)
clean_country <- as.character(unique(gapminder::gapminder$country))
dirty$country <- str_replace(dirty$country, "china", "China") %>%
str_replace(c("Democratic Republic of the Congo", "Congo, Democratic Republic"),"Congo, Dem. Rep.") %>%
str_replace("Cote d'Ivore", "Cote d'Ivoire") %>%
str_replace("Central african republic", "Central African Republic")
unique(dirty$country)
# Verifying
dirty_country == clean_country
clean_country
dirty_country
unique(dirty$country)
dirty_country <- unique(dirty$country)
# Verifying
dirty_country == clean_country
length(dirty_country) == length(clean_country)
str(gapminder::gapminder)
str(dirty)
dirty$country <- as.factor(dirty$country)
dirty$continent <- as.factor(dirty$continent)
dirty$year <- as.integer(dirty$year)
dirty$pop <- as.integer(dirty$pop)
mtcars
data <- mtcars
View(data)
ggplot(data, aes(x = mpg, y = hp)) + geom_points()
library(ggplot2)
ggplot(data, aes(x = mpg, y = hp)) + geom_points()
ggplot(data, aes(x = mpg, y = hp)) + geom_point()
ggplot(data, aes(x = mpg, y = hp)) + geom_point() + theme_classic()
?mtcars
ggplot(data, aes(x = mpg, y = hp, color = am)) + geom_point() + theme_classic()
ggplot(data, aes(x = mpg, y = hp, fill = am)) + geom_point() + theme_classic()
ggplot(data, aes(x = mpg, y = hp, color = am)) + geom_point() + theme_classic()
ggplot(data, aes(x = mpg, y = hp)) + geom_point() + theme_classic()
?mtcars
lm(mpg ~.)
lm(mpg ~., data = data)
summary(lm_reg)
lm_reg <- lm(mpg ~., data = data)
summary(lm_reg)
ggplot(data, aes(x = mpg, y = hp)) + geom_point() + theme_classic()
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R", echo=TRUE)
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
app %>% set_layout(
h1('Hello Dash'),
div("Dash: A web application framework for your data."),
ggplotly(plot))
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
cars <- mtcars
plot <- ggplot(cars, aes(x = mpg, y = disp)) + geom_line() + theme_classic()
ggplotly(plot)
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R")
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R", echo=TRUE)
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R", echo=TRUE)
source("~/Documents/MDS/BLOCK 5/551/Lecture6/app.R", echo=TRUE)
# install.packages('spotifyr')
library(spotifyr)
library(tidyverse)
library(dash)
data <- read.csv("content.csv", header = FALSE)
setwd("~/Documents/MDS/BLOCK 5/552/spotify-playlist-generator")
data <- read.csv("content.csv", header = FALSE)
names <- t(data)[1, ]
lineup <- as.data.frame(t(data)[-1, ], index = FALSE)
names(lineup) <- names
tidy_data <- pivot_longer(lineup, cols = names(lineup), names_to = "date", values_to = "artist") %>%
arrange("date") %>%
filter(artist != "")
# Adding the year to the date and changing the format from 7 JUILLET 2022 to 2022-07-07
tidy_data$date <- paste(tidy_data$date, "2022")
tidy_data$date <- parse_datetime(tidy_data$date, "%d %B %Y", locale = readr::locale("fr"))
tidy_data <- tidy_data %>% arrange(date) # ordering by date
Sys.setenv(SPOTIFY_CLIENT_ID = '211a03c087564462bc01fe6c3d2054d9')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'b0358515e54346b6adc7ebf2eb26f77e')
access_token <- get_spotify_authorization_code()
artist_id <- numeric(0)
for (i in 1:nrow(tidy_data)) {
artist_info <- search_spotify(tidy_data$artist[i], type = "artist")
# If the artist is on spotify
if (length(artist_info) != 0)
{
artist_id <- append(artist_id, artist_info$id[1])
}
# If the artist is not on spotify (has no id)
else
{
artist_id <- append(artist_id, "")
}
}
# Adding column id
tidy_data["id"] <- artist_id
## Finding the top 10 tracks, for each artist (adding it as a column)
top_track_df <- data.frame()
for (i in 1:nrow(tidy_data)){
# only if there actually is an id, if artist not found, there will be no songs either
if (tidy_data$id[i] != "")
{
song_info <- get_artist_top_tracks(id = tidy_data$id[i])
# Possible that the artist exists but that there is no info on the songs (so only check if there exists songs)
if (length(song_info) != 0)
{
top_tracks_i <- song_info %>%
select('id', 'name', 'popularity') %>%
rename(song.id = id, song.name = name, song.popularity = popularity) %>%
arrange(desc(song.popularity)) %>%
mutate(artist = tidy_data$artist[i])
top_track_df<- rbind(top_track_df, top_tracks_i)
}
}
}
tidy_data <- left_join(tidy_data, top_track_df, by = 'artist')
tidy_data <- nest(tidy_data, song.info = c(song.id, song.name, song.popularity))
top_n_songs <- function(n, data){
#' Creates lists of songs to an existing spotify playlist
#'
#' @param n The top 'n' songs from each artist will be added (n can take an integer value from 1 to 10 inclusively)
#' @param data A tidy data frame where the 4th column is a column of nested dataframes. These nested dataframes have a column called song.id that
#' contains the spotify ids of songs
#'
#' @return A list of songs to add to a spotify playlist
songs_to_add <- numeric(0)
for (i in 1:nrow(data))
{
songs_to_add <- append(songs_to_add, data[[4]][[i]]$song.id[1:n])
}
songs_to_add <- songs_to_add[!is.na(songs_to_add)]
songs_to_add
}
add_songs_to_playlist <- function(dates_attending, number_songs_per_artist, name_playlist, spotify_id){
#' Add songs to spotify playlist
#'
#' @param dates_attending Dates of the music festival the individual is interested in (format: %Y-%m-%d) (str)
#' @param number_songs_per_artist Top n songs per artist to add (numeric)
#' @param name_playlist Name of the new playlist to create
#' @param spotify_id The users spotify id
#'
#' @return Creates a spotify playlist with the artist's 'n' most popular songs that are performing on the given dates
# Creating the playlist
new_playlist <- create_playlist(user_id = spotify_id, name = name_playlist)
new_playlist_id <- new_playlist[["id"]]
# Filtering data according to which days the individual is attending the festival
vector_dates <- as.Date(dates_attending)
filtered_data <- tidy_data %>% filter(as.Date(date) %in% vector_dates)
# Makes a list with the song id's of the n (given by `number_songs`) most popular songs for each artist playing on the `dates_attending`
list_songs_to_add <- top_n_songs(n = number_songs_per_artist, data = filtered_data)
# Adds the songs to the playlist (can add a max of 100 songs at a time, so split list in batches of 50)
while (length(list_songs_to_add) > 50){
add_tracks_to_playlist(playlist_id = new_playlist_id, uris = list_songs_to_add[1:50])
list_songs_to_add <- list_songs_to_add[-(1:50)]
}
add_tracks_to_playlist(playlist_id = new_playlist_id, uris = list_songs_to_add)
}
user_id = '31qx2rwdeju4kpeiqh4zyzqn6a3u'
app <- Dash$new(external_stylesheets = dbcThemes$BOOTSTRAP)
app$config$prevent_initial_callbacks
date_picker <- dccDatePickerRange(
id = "date-picker-range",
start_date = as.Date(min(tidy_data$date)),
end_date = as.Date(max(tidy_data$date)),
min_date_allowed = as.Date(min(tidy_data$date)),
max_date_allowed = as.Date(max(tidy_data$date)),
end_date_placeholder_text="Select a date!"
)
date_card <- dbcCard(
list(
dbcCardHeader("Date", class_name = "text-center"),
dbcCardBody(date_picker)))
festival_picker <- dccDropdown(
placeholder = "Select a festival",
id = "dropdown_festival",
value = "Les Deferlantes",
options = list("Les Deferlantes"))
#unique(df_plot5$Category) %>%
#purrr::map(function(seg) list(label = seg, value = seg))
festival_card <- dbcCard(
list(
dbcCardHeader("Name of Festival", class_name = "text-center"),
dbcCardBody(festival_picker)))
playlist_picker <- dbcInput(
placeholder = "Type the playlist's name...",
id = "playlist_name",
type = "text")
playlist_card <- dbcCard(
list(
dbcCardHeader("Name of New Playlist", class_name = "text-center"),
dbcCardBody(playlist_picker)))
number_songs <- dccDropdown(
placeholder = "Select the number of songs",
id = "dropdown_songs",
value = "Les Deferlantes",
options = 1:10)
songs_card <- dbcCard(
list(
dbcCardHeader("Number of Songs per Artist", class_name = "text-center"),
dbcCardBody(number_songs)))
spotify_id <- div(
list(
dbcInput(placeholder = "Type your Spotify ID...", type = "text", id = "spotify_id"),
dbcFormText("ex: 31qx2rwdeju4kpzqn6a3k")
)
)
spotify_id_card <- dbcCard(
list(
dbcCardHeader("Your User Spotify ID", class_name = "text-center"),
dbcCardBody(spotify_id)))
message_card <- dbcCard(
list(
dbcCardBody(
list(
h4(children = "", className = "text-center", id = "message_card")
)
)
)
)
app %>% set_layout(
dbcContainer(
list(
dbcRow(
list(
dbcCol(date_card),
dbcCol(festival_card),
dbcCol(playlist_card),
dbcCol(spotify_id_card),
dbcCol(songs_card)
)
),
dbcRow(
dbcCol(message_card)
)
)
)
)
app$callback(
output('message_card', 'children'),
list(
input("date-picker-range", "start_date"),
input("date-picker-range", "end_date"),
input("playlist_name", "value"),
input("dropdown_songs", "value"),
input("spotify_id", "value")),prevent_initial_call = TRUE,
function(start_date,end_date, name, songs, id){
dates <- seq(as.Date(start_date), as.Date(end_date), by = "days")
add_songs_to_playlist(dates_attending = dates, number_songs_per_artist = songs, name_playlist = name, spotify_id = id)
my_playlists <- get_my_playlists()$name
if (name %in% my_playlists){
message <- "Your playlist has successfully been created"
color <- 'green'
}
else {
message <- "An error occured, your playlist has not been created"
color <- 'red'
}
message
}
)
app %>% run_app()
